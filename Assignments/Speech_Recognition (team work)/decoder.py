# -*- coding: utf-8 -*-
"""Decoder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12i6Pon66JRO4Okb0CbqN33UdqSsKDC57
"""

import itertools
import nltk
from nltk.metrics import distance
import numpy as np

class speech_decoder(object):
  def __init__(self,labels,blank_index=28):
    self.labels=labels
    self.blank_index=blank_index
    self.int_to_char=dict([(i,c) for (i,c) in enumerate(labels)])
  def to_str(self,sequence):
    return ' '.join([self.int_to_char[i] for i in sequence])
  def WER(self,decode,target):
    words=set(decode.split()+target.split())
    word2char=dict(zip(words,range(len(words))))
    new_decode= [chr(word2char[w]) for w in decode.split()]
    new_target= [chr(word2char[w]) for w in target.split()]
    return distance.edit_distance(' '.join(new_decode),' '.join(new_target))
  def decode(self,logits):
    best=list(np.argmax(logits,axis=1))
    merge=[k for k,_ in itertools.groupby(best)]
    merge_remove_blank=[]
    for k in merge:
      if(k!=self.blank_index):
        merge_remove_blank.append(k)
    return self.to_str(merge_remove_blank)

